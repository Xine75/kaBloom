[{"C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\index.js":"1","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\Kabloom.js":"2","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\ApplicationViews.js":"3","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\Home.js":"4","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\plant\\PlantForm.js":"5","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\plant\\PlantList.js":"6","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\plant\\PlantProvider.js":"7","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\plant\\PlantDetail.js":"8","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\note\\NoteProvider.js":"9","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\note\\NoteForm.js":"10","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\plant\\PlantCard.js":"11","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\note\\NoteList.js":"12","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\note\\NoteCard.js":"13","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\auth\\Login.js":"14","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\auth\\Register.js":"15"},{"size":400,"mtime":1620955551343,"results":"16","hashOfConfig":"17"},{"size":1032,"mtime":1620954997796,"results":"18","hashOfConfig":"17"},{"size":1582,"mtime":1620954860741,"results":"19","hashOfConfig":"17"},{"size":839,"mtime":1620954860741,"results":"20","hashOfConfig":"17"},{"size":8187,"mtime":1620954860747,"results":"21","hashOfConfig":"17"},{"size":1562,"mtime":1620954860747,"results":"22","hashOfConfig":"17"},{"size":2157,"mtime":1620954860748,"results":"23","hashOfConfig":"17"},{"size":2576,"mtime":1620954860747,"results":"24","hashOfConfig":"17"},{"size":1715,"mtime":1620954860745,"results":"25","hashOfConfig":"17"},{"size":2743,"mtime":1620954860744,"results":"26","hashOfConfig":"17"},{"size":2984,"mtime":1620954860746,"results":"27","hashOfConfig":"17"},{"size":1486,"mtime":1620954860744,"results":"28","hashOfConfig":"17"},{"size":1249,"mtime":1620954860743,"results":"29","hashOfConfig":"17"},{"size":2384,"mtime":1620955073504,"results":"30","hashOfConfig":"17"},{"size":2970,"mtime":1620955081371,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1phyudo",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"34"},"C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\index.js",[],["71","72"],"C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\Kabloom.js",[],"C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\ApplicationViews.js",[],"C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\Home.js",[],"C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\plant\\PlantForm.js",["73","74"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { PlantContext } from \"./PlantProvider\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport \"./Plant.css\"\r\n\r\n//PlantForm defines a function called PlantForm that:\r\n//1. Allows user to create, save and edit a new plant\r\n//2. Utilizes Cloudinary to upload and save image of plant\r\n\r\nexport const PlantForm = () => {\r\n    const { addPlant, updatePlant, getPlantById } = useContext(PlantContext)\r\n    const history = useHistory()\r\n    const currentUser = parseInt(sessionStorage.getItem(\"kabloom_user\"))\r\n    const {plantId} = useParams();\r\n\r\n//------------------ SETTING STATE --------------------------\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [imageURL, setImageURL ] = useState(\"\")\r\n    const [plant, setPlant] = useState({\r\n        userId: currentUser,\r\n        type: \"\",\r\n        name: \"\",\r\n        dateAdopted: \"\",\r\n        water: \"\",\r\n        light: \"\",\r\n        fertilize: \"\",\r\n        lastWatered: \"\",\r\n        imageURL: \"\"\r\n    })\r\n\r\n//--------------------IMAGE UPLOAD HANDLING --------------------\r\n    const [loading, setLoading] = useState(false)\r\n    \r\n    const uploadImage = async e => {\r\n        \r\n        const files = e.target.files\r\n        const data = new FormData()\r\n        data.append(\"file\", files[0])\r\n        data.append(\"upload_preset\", \"kabloom\")\r\n        setLoading(true)\r\n        const response = await fetch(\r\n            \"https://api.cloudinary.com/v1_1/kabloom/image/upload\",\r\n            {\r\n                method: \"POST\",\r\n                body: data\r\n            }\r\n        )\r\n        const file = await response.json()\r\n\r\n        setImageURL(file.secure_url)\r\n        setLoading(false)\r\n    }\r\n //---------------------- SAVING USER INPUT----------------------\r\n\r\n    const handleControlledInputChange = (e) => {\r\n        const newPlant = { ...plant }\r\n        newPlant[e.target.id] = e.target.value\r\n        setPlant(newPlant)\r\n    }\r\n        //---------------- SAVING NEW OR EDITED PLANT UPON CLICK EVENT ----------------\r\n    const handleClickSavePlant = (e) => {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n        if (plantId){\r\n            updatePlant({\r\n                id: plant.id,\r\n                userId: currentUser,\r\n                type: plant.type,\r\n                name: plant.name,\r\n                dateAdopted: plant.dateAdopted,\r\n                water: plant.water,\r\n                light: plant.light,\r\n                fertilize: plant.fertilize,\r\n                lastWatered: plant.lastWatered,\r\n                imageURL: plant.imageURL\r\n            })\r\n            .then(() => history.push(`/plants/detail/${plantId}`))\r\n        } else {\r\n            const newPlant = { ...plant, imageURL }\r\n            addPlant(newPlant)\r\n                .then(() => history.push(\"/plants\"))\r\n        }\r\n    }\r\n\r\n//--------------------GET PLANT BY ID ------------------------------\r\n\r\n    useEffect(() => {\r\n          if (plantId){\r\n            getPlantById(plantId)\r\n            .then(plant => {\r\n                setPlant(plant)\r\n                setIsLoading(false)\r\n            })\r\n          } else {\r\n            setIsLoading(false)\r\n          }\r\n      }, [])\r\n\r\n//---------------------- JSX ADD / EDIT PLANT FORM --------------------------\r\n    return (\r\n        <>\r\n        <form className=\"plantForm\">\r\n            <h3 className=\"plantForm__title\">{plantId ? <> Edit Plant </> : <>Newly Adopted Plant</>}</h3>\r\n\r\n            <div className=\"image\">\r\n                <div>Upload Image</div>\r\n                <input type=\"file\" name=\"file\" placeholder=\"Upload an image\" onChange={uploadImage}/>\r\n                {loading ? (\r\n                    <h3>Loading...</h3>\r\n                ) : (\r\n                        <img src={imageURL} style={{ width: \"100px\" }} />\r\n                    )}\r\n            </div>\r\n            <br/>\r\n            <fieldset>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Plant name:</label>\r\n                    <input type=\"text\" id=\"name\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Plant name\" value={plant.name} />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Plant type:</label>\r\n                    <input type=\"text\" id=\"type\" onChange={handleControlledInputChange} required className=\"form-control\" placeholder=\"Scientific or common\" value={plant.type} />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Date adopted:</label>\r\n                    <input type=\"date\" id=\"dateAdopted\" onChange={handleControlledInputChange} required className=\"form-control\"  value={plant.dateAdopted} />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Watering instructions:</label>\r\n                    <select value={plant.water} name=\"water\" id=\"water\" className=\"form-control\" onChange={handleControlledInputChange}>\r\n                    <option value=\"0\">How thirsty am I?</option>\r\n                    <option value=\"Keep soil moist\">Keep soil moist</option>\r\n                    <option value=\"Let top of soil dry before watering\">Let top of soil dry before watering</option>\r\n                    <option value=\"Let soil dry between waterings\">Let soil dry completely between waterings</option>\r\n                    <option value=\"Water infrequently\">Water infrequently (succulents and cacti)</option>\r\n                    <option value=\"Plant is dormant, water with caution\">Plant is dormant, water with caution (succulents and cacti)</option>\r\n                </select>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Light needs:</label>\r\n                    <select value={plant.light} name=\"light\" id=\"light\" className=\"form-control\" onChange={handleControlledInputChange}>\r\n                    <option value=\"0\">How much sun do I like?</option>\r\n                    <option value=\"Low\">Low</option>\r\n                    <option value=\"Bright indirect\">Bright indirect</option>\r\n                    <option value=\"Medium\">Medium</option>\r\n                    <option value=\"Direct\">Direct</option>\r\n                    <option value=\"As much direct sun as possible\">As much direct sun as possible (succulents and cacti)</option>\r\n                </select>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Fertilize?</label>\r\n                    <select value={plant.fertilize} name=\"fertilize\" id=\"fertilize\" className=\"form-control\" onChange={handleControlledInputChange}>\r\n                    <option value=\"0\">Even plants gotta eat</option>\r\n                    <option value=\"Monthly\">Monthly</option>\r\n                    <option value=\"Every other month\">Every other month</option>\r\n                    <option value=\"Every 6 months\">Every 6 months</option>\r\n                    <option value=\"Yearly\">Yearly</option>\r\n                </select>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Last watered:</label>\r\n                    <input type=\"date\" id=\"lastWatered\" onChange={handleControlledInputChange} required className=\"form-control\"  value={plant.lastWatered} />\r\n                </div>\r\n            </fieldset>\r\n            <button className=\"btn btn-info\" disabled={isLoading} onClick={handleClickSavePlant}>{plantId ? <>Save Changes</> : <>Add Plant</>}</button>\r\n            <Button className=\"btn\" variant=\"link\"  disabled={isLoading} onClick={() => {history.push(\"/plants\")}}>Cancel</Button>\r\n\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\plant\\PlantList.js",["75"],"import React, { useContext, useEffect } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { PlantContext } from \"./PlantProvider\"\r\nimport { PlantCard } from \"./PlantCard\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport \"./Plant.css\"\r\n\r\n//Create and export PlantList, which will be responsible for:\r\n//1. Rendering current user's plant to the DOM\r\n//2. Rendering an \"I got a new plant\" button that will take user to PlantForm\r\n//3. This will act as user's home page and will need a scroll bar in CSS\r\n\r\nexport const PlantList = () => {\r\n    const { plants, getPlants } = useContext(PlantContext)\r\n    const currentUser = parseInt(sessionStorage.getItem(\"kabloom_user\"))\r\n    const history = useHistory()\r\n\r\n//--------------REACH OUT AND GET THOSE PLANTS---------------------\r\n\r\n    useEffect(() => {\r\n        getPlants()\r\n    }, [])\r\n\r\n//----------------FILTER plants FOR those belonging to current user, then feed each object in the array into PlantCard\r\n\r\n    return (\r\n        <>\r\n            <div className=\"plants\">\r\n                {\r\n                    plants.filter(p => p.userId === currentUser).map(plant => {\r\n                        \r\n                        return <PlantCard key={plant.id} plant={plant}/>\r\n                    })\r\n                }\r\n                </div>\r\n       <Button className=\"new__plant__btn\" variant=\"info\" size=\"lg\" style={{ width: '20rem'  }} onClick={() => {history.push(\"/plant/create\")}}>\r\n          <b>kaBloom!</b> I got a new plant!\r\n      </Button>           \r\n        \r\n        </>\r\n    )\r\n}","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\plant\\PlantProvider.js",[],"C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\plant\\PlantDetail.js",["76","77"],"import React, { useContext, useEffect, useState } from \"react\"\r\nimport { useParams, useHistory } from \"react-router-dom\"\r\nimport { PlantContext } from \"./PlantProvider\"\r\nimport { NoteList } from \"../note/NoteList\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport Col from \"react-bootstrap/Col\"\r\nimport Row from \"react-bootstrap/Row\"\r\nimport \"./Plant.css\"\r\n\r\nexport const PlantDetail =()=> {\r\n    const { getPlantById, deletePlant } = useContext(PlantContext)\r\n    const [plant, setPlant] = useState({})\r\n    const {plantId} = useParams()\r\n    const history = useHistory()\r\n\r\n    //-----------------HANDLE DELETE --------------------\r\n\r\n    const handleDelete = () => {\r\n        deletePlant(plant.id)\r\n        .then(() => {\r\n            history.push(\"/plants\")\r\n        })\r\n    }\r\n\r\n//-------------------- FIND THE CORRECT PLANT USING PLANT ID IN PARAMS ------------\r\n\r\n    useEffect(() => {\r\n        getPlantById(plantId)\r\n        .then((response) => {\r\n            setPlant(response)\r\n        })\r\n    }, [])\r\n\r\n//---------------------- JSX FOR PLANT DETAILS -----------------------------\r\n\r\n    return (\r\n        <>\r\n        \r\n        <section className=\"plant\" style={{ width: '20rem' }}>\r\n        <Row>\r\n            <Col>\r\n            <img src={plant.imageURL} className=\"plant__detail__image\"/>\r\n            </Col>\r\n\r\n            <Col>\r\n            <Button className=\"plant__done__btn\" variant=\"link\" size=\"sm\" onClick={() => { history.push(\"/plants\") }}>Done</Button>\r\n\r\n            </Col>\r\n   \r\n            \r\n\r\n        </Row>\r\n        <br/>\r\n       <section className=\"plant__details\">\r\n          <h3 className=\"plant__detail__name\">{plant.name}</h3>\r\n          <div className=\"plant__detail__type\">{plant.type}</div>\r\n          <div className=\"plant__dateAdopted\">Date adopted: <b>{new Date(plant.dateAdopted).toLocaleDateString()}</b></div>\r\n          <div className=\"plant__water\">Water: <b>{plant.water}</b></div>\r\n          <div className=\"plant__light\">Light: <b>{plant.light}</b></div>\r\n          <div className=\"plant__water\">Fertilize? <b>{plant.fertilize}</b></div>\r\n          </section>\r\n        <br/>\r\n        <section className=\"plant__btns\">\r\n          <Button className=\"plant__edit__btn\" variant=\"link\" onClick={() => {history.push(`/plants/edit/${plantId}`)}}><i className=\"far fa-edit\"></i></Button>{' '}\r\n          <Button className=\"plant__delete__btn\" variant=\"link\" onClick={handleDelete}><i className=\"fas fa-trash-alt\"></i></Button>\r\n          </section>\r\n        </section>\r\n        <br/>\r\n\r\n        <NoteList />\r\n        </>\r\n      )\r\n}\r\n\r\n","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\note\\NoteProvider.js",[],"C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\note\\NoteForm.js",["78"],"import React, { useState, useContext, useEffect } from \"react\"\r\nimport { useHistory, useParams } from \"react-router-dom\"\r\nimport { NoteContext } from \"./NoteProvider\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport \"./Note.css\"\r\n\r\n//NoteForm defines a function called NoteForm that allows user to add new note\r\n//or Delete a note\r\n\r\nexport const NoteForm = () => {\r\n    const { addNote, getNoteById } = useContext(NoteContext)\r\n    const history = useHistory()\r\n    const { plantId } = useParams()\r\n    const { noteId } = useParams()\r\n    const timestamp = Date.now()\r\n    const noteDate = new Intl.DateTimeFormat('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' }).format(timestamp)\r\n\r\n    //------------------SETTING STATE--------------------\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [note, setNote] = useState({\r\n        plantId: 0,\r\n        date: \"\",\r\n        text: \"\"\r\n    })\r\n    //---------------- SAVING USER INPUT-----------------\r\n\r\n    const handleControlledInputChange = (e) => {\r\n        const newNote = { ...note }\r\n        newNote[e.target.id] = e.target.value\r\n        setNote(newNote)\r\n    }\r\n    //---------------- SAVING NOTE UPON CLICK EVENT ----------------\r\n    const handleClickSaveNote = (e) => {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n\r\n        addNote({\r\n            plantId: parseInt(plantId),\r\n            text: note.text,\r\n            date: noteDate\r\n        })\r\n            .then(() => history.push(`/plants/detail/${plantId}`))\r\n\r\n    }\r\n\r\n    //------------------GET NOTE BY ID-------------------------\r\n    useEffect(() => {\r\n        if (noteId) {\r\n            getNoteById(noteId)\r\n                .then(note => {\r\n                    setNote(note)\r\n                    setIsLoading(false)\r\n                })\r\n        } else {\r\n            setIsLoading(false)\r\n        }\r\n    }, [])\r\n\r\n    //--------------- JSX FOR ADD NOTE FORM --------------------\r\n    return (\r\n        <form className=\"noteForm\">\r\n            <h3 className=\"noteForm__title\">Add a Note</h3>\r\n            <fieldset className=\"noteForm__input\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"text\">What's going on?</label>\r\n                    <textarea id=\"text\" onChange={handleControlledInputChange} required autoFocus className=\"form-control__note\" placeholder=\"Note details\" value={note.text} />\r\n                </div>\r\n            </fieldset>\r\n            <Button className=\"btn btn-info\" disabled={isLoading} onClick={handleClickSaveNote}>Save Note</Button>\r\n            <Button className=\"btn\" variant=\"link\" disabled={isLoading} onClick={() => {history.push(`/plants/detail/${plantId}`)}}>Cancel</Button>\r\n\r\n        </form>\r\n    )\r\n}","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\plant\\PlantCard.js",["79"],"import React, { useContext, useState, useEffect } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { PlantContext } from \"./PlantProvider\"\r\nimport Card from \"react-bootstrap/Card\"\r\nimport Col from \"react-bootstrap/Col\"\r\nimport Row from \"react-bootstrap/Row\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport \"./Plant.css\"\r\n\r\n//1. Rendering name, type, image and last-watered date of users's plants to the DOM\r\n//2. Rendering a \"Watered Today\" button that will update \"lastWatered\" prop on plant\r\n//3. \"Last Watered\" text field will update to DOM\r\n//4. Rendering a link on plant's name that will take user to details and notes for a specific plant\r\n\r\nexport const PlantCard = ({ plant }) => {\r\n\r\n  const { updatePlant, getPlants } = useContext(PlantContext)\r\n  const timestamp = Date.now()\r\n\r\n  ///------------ UPADATE LAST WATERED DATE -----------------------\r\n  \r\n  const [isWatered, setIsWatered] = useState();\r\n\r\n  const UpdateLastWatered = (e) => {\r\n    e.preventDefault()\r\n    if (plant.lastWatered === new Intl.DateTimeFormat('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' }).format(timestamp)) {\r\n      setIsWatered(true)\r\n    } else {\r\n    const updatedPlant = { ...plant }\r\n    updatedPlant.lastWatered = new Intl.DateTimeFormat('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' }).format(timestamp)\r\n    setIsWatered(true)\r\n    updatePlant(updatedPlant)\r\n      .then(getPlants)\r\n    }\r\n  }\r\n//-----------------CHECK STATE TO SEE IF PLANT WAS WATERED TODAY-----------------\r\n  useEffect(() => {\r\n    if (plant.lastWatered === new Intl.DateTimeFormat('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' }).format(timestamp)) {\r\n      setIsWatered(true)\r\n    } else {\r\n    setIsWatered(false)\r\n    }\r\n  }, [])\r\n\r\n  //------------------JSX FOR PLANT CARD ----------------------------------\r\n  return (\r\n    <>\r\n    <Card className=\"plant__card\" border=\"success\">\r\n      <Card.Body>\r\n\r\n        <Row className=\"row__top\">\r\n\r\n          <Col className=\"plant__left\">\r\n            <Card.Img className=\"plant__card__image\" src={plant.imageURL} />\r\n          </Col>\r\n\r\n          <Col className=\"plant__right\">\r\n            <Card.Title className=\"plant__name\" >\r\n              <Link to={`/plants/detail/${plant.id}`} style={{ color: \"#028a0f\" }}>\r\n                {plant.name}\r\n              </Link>\r\n            </Card.Title>\r\n            <div className=\"plant__type\">{plant.type}</div>\r\n          </Col>\r\n\r\n        </Row>\r\n\r\n\r\n        <Row className=\"row__bottom\">\r\n          <Col><div className=\"plant_lastWatered\">Last watered: <b>{new Date(plant.lastWatered).toLocaleDateString()}</b></div></Col>\r\n          <Col><Button className=\"plant__wateredToday__btn\" variant=\"info\" size=\"sm\" id={plant.id} onClick={UpdateLastWatered}>\r\n            {isWatered ? <i className=\"fas fa-check\"></i> : \"I Watered Today!\"  }\r\n      </Button>\r\n          </Col>\r\n        </Row>\r\n\r\n      </Card.Body>\r\n    </Card>\r\n    <br/>\r\n     </>\r\n  )\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\note\\NoteList.js",["80"],"import React, { useContext, useEffect } from \"react\"\r\nimport { useHistory, useParams } from \"react-router-dom\"\r\nimport { NoteContext } from \"./NoteProvider\"\r\nimport { NoteCard } from \"./NoteCard\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport \"./Note.css\"\r\n\r\n//Create and export NoteList, which will be responsible for:\r\n//1. Rendering notes for user's selected plant \r\n//2. Allow user to add a note\r\n\r\nexport const NoteList = () => {\r\n    const { notes, getNotes } = useContext(NoteContext)\r\n    const history = useHistory()\r\n    const { plantId } = useParams()\r\n\r\n//--------------Reach out and get those Notes--------------------------\r\n   \r\n     useEffect(() => {\r\n        getNotes()\r\n    }, [])\r\n\r\n//---------------Filter notes for those whose note.plantId matches the current detail/plantId, then feed each object in the array into NoteCard*/}\r\n\r\n    return (\r\n        <>\r\n         <h4 className=\"notes__header\">Notes</h4>\r\n            <div className=\"notes\">\r\n                {\r\n                    notes.filter(note => note.plantId === parseInt(plantId)).map(note => {\r\n\r\n                        return <NoteCard key={note.id} note={note} />\r\n                    })\r\n                }\r\n                </div>\r\n                <div>\r\n                <Button className=\"notes__btn\" size=\"sm\" variant=\"info\" onClick={() => { history.push(`/note/create/${plantId}`) }}>\r\n                    Add a Note\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\note\\NoteCard.js",[],"C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\auth\\Login.js",["81","82"],"import Button from \"react-bootstrap/Button\"\r\nimport React, { useRef } from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\"\r\nimport \"./Login.css\"\r\n\r\n\r\nexport const Login = props => {\r\n    const email = useRef()\r\n    const password = useRef()\r\n    const existDialog = useRef()\r\n    const history = useHistory()\r\n\r\n    const existingUserCheck = () => {\r\n        return fetch(`http://localhost:8080/users?email=${email.current.value}`)\r\n            .then(res => res.json())\r\n            .then(user => user.length ? user[0] : false)\r\n    }\r\n\r\n    const handleLogin = (e) => {\r\n        e.preventDefault()\r\n\r\n        existingUserCheck()\r\n            .then(exists => {\r\n                if (exists) {\r\n                    sessionStorage.setItem(\"kabloom_user\", exists.id)\r\n                    history.push(\"/plants\")\r\n                } else {\r\n                    existDialog.current.showModal()\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <main className=\"container--login\">\r\n            <dialog className=\"dialog dialog--auth\" ref={existDialog}>\r\n                <div>User does not exist</div>\r\n                <button className=\"button--close\" onClick={e => existDialog.current.close()}>Close</button>\r\n            </dialog>\r\n\r\n            <section>\r\n                <form className=\"form--login\" onSubmit={handleLogin}>\r\n                    <h1 className=\"form--login__title\"></h1>\r\n                    <h4>Please sign in</h4>\r\n                    <fieldset>\r\n                        <label htmlFor=\"inputEmail\"> Email address </label>\r\n                        <input ref={email} type=\"email\"\r\n                            id=\"email\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Email address\"\r\n                            required autoFocus />\r\n                    </fieldset>\r\n                    <br/>\r\n                    <fieldset>\r\n                        <Button className=\"login__btn\"type=\"submit\" variant=\"success\">\r\n                            Sign in\r\n                        </Button>\r\n                    </fieldset>\r\n                </form>\r\n            </section>\r\n            <section className=\"link--register\">\r\n                <Link to=\"/register\">Not a member yet?</Link>\r\n            </section>\r\n        </main>\r\n        </>\r\n    )\r\n}","C:\\Users\\cjdoz\\workspace\\kaBloom\\src\\components\\auth\\Register.js",["83"],"import React, { useRef } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport \"./Login.css\"\r\n\r\nexport const Register = (props) => {\r\n    const userName = useRef()\r\n    const email = useRef()\r\n    const verifyPassword = useRef()\r\n    const conflictDialog = useRef()\r\n    const history = useHistory()\r\n\r\n    const existingUserCheck = () => {\r\n        return fetch(`http://localhost:8080/users?email=${email.current.value}`)\r\n            .then(res => res.json())\r\n            .then(user => !!user.length)\r\n    }\r\n\r\n    const handleRegister = (e) => {\r\n        e.preventDefault()\r\n\r\n\r\n        existingUserCheck()\r\n            .then((userExists) => {\r\n                if (!userExists) {\r\n                    fetch(\"http://localhost:8080/users\", {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify({\r\n                            email: email.current.value,\r\n                            name: `${userName.current.value}`\r\n                        })\r\n                    })\r\n                        .then(res => res.json())\r\n                        .then(createdUser => {\r\n                            if (createdUser.hasOwnProperty(\"id\")) {\r\n                                sessionStorage.setItem(\"kabloom_user\", createdUser.id)\r\n                                history.push(\"/\")\r\n                            }\r\n                        })\r\n                }\r\n                else {\r\n                    conflictDialog.current.showModal()\r\n                }\r\n            })\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n        <main style={{ textAlign: \"center\" }}>\r\n\r\n            <dialog className=\"dialog dialog--password\" ref={conflictDialog}>\r\n                <div>Account with that email address already exists</div>\r\n                <button className=\"button--close\" onClick={e => conflictDialog.current.close()}>Close</button>\r\n            </dialog>\r\n\r\n            <form className=\"form--login\" onSubmit={handleRegister}>\r\n                <h1 className=\"h3 mb-3 font-weight-normal\">Please Register for KaBloom</h1>\r\n                <fieldset>\r\n                    <label htmlFor=\"firstName\"> User Name </label>\r\n                    <input ref={userName} type=\"text\" name=\"userName\" className=\"form-control\" placeholder=\"First name\" required autoFocus />\r\n                </fieldset>\r\n                <fieldset>\r\n                    <label htmlFor=\"inputEmail\"> Email address </label>\r\n                    <input ref={email} type=\"email\" name=\"email\" className=\"form-control\" placeholder=\"Email address\" required />\r\n                </fieldset>\r\n                <br/>\r\n                <fieldset>\r\n                    <Button type=\"submit\"> Sign in </Button>\r\n                </fieldset>\r\n            </form>\r\n        </main>\r\n        </>\r\n    )\r\n}",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":99,"column":10,"nodeType":"90","endLine":99,"endColumn":12,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":113,"column":25,"nodeType":"94","endLine":113,"endColumn":74},{"ruleId":"88","severity":1,"message":"95","line":22,"column":8,"nodeType":"90","endLine":22,"endColumn":10,"suggestions":"96"},{"ruleId":"88","severity":1,"message":"89","line":32,"column":8,"nodeType":"90","endLine":32,"endColumn":10,"suggestions":"97"},{"ruleId":"92","severity":1,"message":"93","line":42,"column":13,"nodeType":"94","endLine":42,"endColumn":73},{"ruleId":"88","severity":1,"message":"98","line":57,"column":8,"nodeType":"90","endLine":57,"endColumn":10,"suggestions":"99"},{"ruleId":"88","severity":1,"message":"100","line":43,"column":6,"nodeType":"90","endLine":43,"endColumn":8,"suggestions":"101"},{"ruleId":"88","severity":1,"message":"102","line":21,"column":8,"nodeType":"90","endLine":21,"endColumn":10,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":10,"column":11,"nodeType":"106","messageId":"107","endLine":10,"endColumn":19},{"ruleId":"108","severity":1,"message":"109","line":44,"column":21,"nodeType":"94","endLine":44,"endColumn":56},{"ruleId":"104","severity":1,"message":"110","line":9,"column":11,"nodeType":"106","messageId":"107","endLine":9,"endColumn":25},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getPlantById' and 'plantId'. Either include them or remove the dependency array.","ArrayExpression",["113"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getPlants'. Either include it or remove the dependency array.",["114"],["115"],"React Hook useEffect has missing dependencies: 'getNoteById' and 'noteId'. Either include them or remove the dependency array.",["116"],"React Hook useEffect has missing dependencies: 'plant.lastWatered' and 'timestamp'. Either include them or remove the dependency array.",["117"],"React Hook useEffect has a missing dependency: 'getNotes'. Either include it or remove the dependency array.",["118"],"no-unused-vars","'password' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'verifyPassword' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"119","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [getPlantById, plantId]",{"range":"130","text":"131"},"Update the dependencies array to be: [getPlants]",{"range":"132","text":"133"},{"range":"134","text":"131"},"Update the dependencies array to be: [getNoteById, noteId]",{"range":"135","text":"136"},"Update the dependencies array to be: [plant.lastWatered, timestamp]",{"range":"137","text":"138"},"Update the dependencies array to be: [getNotes]",{"range":"139","text":"140"},[3272,3274],"[getPlantById, plantId]",[851,853],"[getPlants]",[1009,1011],[1873,1875],"[getNoteById, noteId]",[1763,1765],"[plant.lastWatered, timestamp]",[701,703],"[getNotes]"]